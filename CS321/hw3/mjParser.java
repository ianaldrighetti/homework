/* Generated By:JavaCC: Do not edit this line. mjParser.java */
import java.util.*;
import java.io.*;
import ast.*;

public class mjParser implements mjParserConstants {
        public static void main(String [] args)
        {
                try
                {
                        if (args.length == 1)
                        {
                                FileInputStream stream = new FileInputStream(args[0]);
                                Ast.Program p = new mjParser(stream).Program();
                                stream.close();
                                System.out.print(p);
                        }
                        else
                        {
                                System.out.println("Need a file name as command-line argument.");
                        }
                }
                catch (TokenMgrError e)
                {
                        System.err.println(e);
                }
                catch (Exception e)
                {
                        System.err.println(e);
                }
        }

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
  static final public Ast.Program Program() throws ParseException {
        List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
        Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                     cl.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
        Ast.Id className;
        Ast.Id superClass = null;
        List<Ast.VarDecl> variables  = new ArrayList<Ast.VarDecl>();
        List<Ast.MethodDecl> methods = new ArrayList<Ast.MethodDecl>();

        Ast.VarDecl variable;
        Ast.MethodDecl method;
    jj_consume_token(9);
    className = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      superClass = ID();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(55);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 15:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      variable = VarDecl();
                                        variables.add(variable);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      method = MethodDecl();
                                         methods.add(method);
    }
    jj_consume_token(56);
                {if (true) return new Ast.ClassDecl(className.nm, superClass == null ? null : superClass.nm, variables, methods);}
    throw new Error("Missing return statement in function");
  }

// MethodDecl -> "public" (
//		ExtType ID "(" [Param {"," Param}] ")"
//	    | "static" "void" "main" "(" "String" "[" "]" ID ")"
// 	)
// "{" {VarDecl} {Stmt} "}"
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
        Ast.Type returnType = null;
        Ast.Id methodName = null;
        List<Ast.Param> params = new ArrayList<Ast.Param>();
        List<Ast.VarDecl> varDecls = new ArrayList<Ast.VarDecl>();
        List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();

        Ast.Param param;
        Ast.VarDecl varDecl;
        Ast.Stmt stmt;
    jj_consume_token(12);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
    case 14:
    case 15:
    case ID:
      returnType = ExtType();
      methodName = ID();
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 15:
      case ID:
        param = Param();
                                           params.add(param);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(49);
          param = Param();
                                              params.add(param);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(52);
      break;
    case 11:
      jj_consume_token(11);
      jj_consume_token(13);
      jj_consume_token(22);
      jj_consume_token(51);
      jj_consume_token(23);
      jj_consume_token(53);
      jj_consume_token(54);
      ID();
      jj_consume_token(52);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(55);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      varDecl = VarDecl();
                                                    varDecls.add(varDecl);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 20:
      case 21:
      case 26:
      case ID:
      case 55:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      stmt = Stmt();
                                 stmts.add(stmt);
    }
    jj_consume_token(56);
                {if (true) return new Ast.MethodDecl(returnType, methodName == null? "main" : methodName.nm, params, varDecls, stmts);}
    throw new Error("Missing return statement in function");
  }

// Param -> Type <ID>
  static final public Ast.Param Param() throws ParseException {
        Ast.Type type;
        Ast.Id paramName;
    type = Type();
    paramName = ID();
                {if (true) return new Ast.Param(type, paramName.nm);}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> Type <ID> ["=" InitExpr()] ";"
  static final public Ast.VarDecl VarDecl() throws ParseException {
        Ast.Type type;
        Ast.Id varName;
        Ast.Exp expr = null;
    type = Type();
    varName = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      expr = InitExpr();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(48);
                {if (true) return new Ast.VarDecl(type, varName.nm, expr);}
    throw new Error("Missing return statement in function");
  }

// ExtType -> Type | "void"
  static final public Ast.Type ExtType() throws ParseException {
        Ast.Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
                         type=null;
      break;
    case 14:
    case 15:
    case ID:
      type = Type();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

// Type -> <ID> | BasicType ["[" "]"]
  static final public Ast.Type Type() throws ParseException {
        Ast.Type type;
        Ast.Id typeName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 15:
      type = BasicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        jj_consume_token(54);
                                               type = new Ast.ArrayType(type);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case ID:
      typeName = ID();
                                    type = new Ast.ObjType(typeName.nm);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

// BasicType -> "int" | "boolean"
  static final public Ast.Type BasicType() throws ParseException {
        Ast.Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
                        {if (true) return new Ast.BoolType();}
      break;
    case 14:
      jj_consume_token(14);
                        {if (true) return new Ast.IntType();}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Stmt -> "{" {Stmt} "}"
//         | ExtId ("(" [Args] ")" | ["[" Expr "]"] "=" InitExpr) ";"
//         | "if" "(" Expr ")" Stmt ["else" Stmt]
//         | "while" "(" Expr ")" Stmt
//         | "System" "." "out" "." "println" "(" [PrintArg] ")" ";"
//         | "return" Expr ";"
  static final public Ast.Stmt Stmt() throws ParseException {
        List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
        List<Ast.Exp> args = new ArrayList<Ast.Exp>();
        Ast.Stmt stmt;
        Ast.Stmt stmt0 = null;
        Ast.Block block;
        Ast.Assign assign;
        Ast.CallStmt call;
        Ast.If ifStmt;
        Ast.While whileStmt;
        Ast.Print print;
        Ast.Return returnStmt;

        Ast.Exp extId;
        Ast.Id exp1Id;
        Ast.Field exp1F;
        Ast.Exp exp1;
        Ast.Exp exp2;
        Ast.Exp exp0 = null;
        Ast.Node printArg = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
        case 18:
        case 20:
        case 21:
        case 26:
        case ID:
        case 55:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        stmt = Stmt();
                              stmts.add(stmt);
      }
      jj_consume_token(56);
                        {if (true) return new Ast.Block(stmts);}
      break;
    case 17:
    case ID:
      exp1 = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 53:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          jj_consume_token(53);
          exp0 = Expr();
          jj_consume_token(54);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(47);
        exp2 = InitExpr();
        jj_consume_token(48);
                                if (exp0 == null)
                                {
                                        {if (true) return new Ast.Assign(exp1, exp2);}
                                }
                                else
                                {
                                        {if (true) return new Ast.Assign( new Ast.ArrayElm(exp1, exp0), exp2 );}
                                }
        break;
      case 51:
        jj_consume_token(51);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
        case 24:
        case 25:
        case INTLIT:
        case ID:
        case 35:
        case 40:
        case 51:
          args = Args();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(52);
        jj_consume_token(48);
                                if (exp1 instanceof Ast.Field)
                                {
                                        exp1F = (Ast.Field) exp1;
                                        {if (true) return new Ast.CallStmt(exp1F.obj, exp1F.nm, args);}
                                }
                                else
                                {
                                        exp1Id = (Ast.Id)exp1;
                                        {if (true) return new Ast.CallStmt(new Ast.This(), exp1Id.nm, args);}
                                }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(51);
      exp1 = Expr();
      jj_consume_token(52);
      stmt = Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        stmt0 = Stmt();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                        {if (true) return new Ast.If(exp1, stmt, stmt0);}
      break;
    case 20:
      jj_consume_token(20);
      jj_consume_token(51);
      exp1 = Expr();
      jj_consume_token(52);
      stmt = Stmt();
                        {if (true) return new Ast.While(exp1, stmt);}
      break;
    case 26:
      jj_consume_token(26);
      jj_consume_token(50);
      jj_consume_token(27);
      jj_consume_token(50);
      jj_consume_token(28);
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 24:
      case 25:
      case INTLIT:
      case STRLIT:
      case ID:
      case 35:
      case 40:
      case 51:
        printArg = PrintArg();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(52);
      jj_consume_token(48);
                        {if (true) return new Ast.Print((Ast.PrArg)printArg);}
      break;
    case 21:
      jj_consume_token(21);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 24:
      case 25:
      case INTLIT:
      case ID:
      case 35:
      case 40:
      case 51:
        exp0 = Expr();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(48);
                        {if (true) return new Ast.Return(exp0);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Args -> Expr {"," Expr}
  static final public List<Ast.Exp> Args() throws ParseException {
        List<Ast.Exp> args = new ArrayList<Ast.Exp>();
        Ast.Exp expr;
    expr = Expr();
                        args.add(expr);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(49);
      expr = Expr();
                                                               args.add(expr);
    }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

// PrintArg -> Expr | STRLIT
  static final public Ast.Node PrintArg() throws ParseException {
        Ast.Exp expr;
        String str = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 24:
    case 25:
    case INTLIT:
    case ID:
    case 35:
    case 40:
    case 51:
      expr = Expr();
                        {if (true) return expr;}
      break;
    case STRLIT:
      str = StrLit();
                        {if (true) return new Ast.StrLit(str);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// InitExpr -> "new" (BasicType "[" INTLIT "]" | ID "(" ")")
//             | Expr
  static final public Ast.Exp InitExpr() throws ParseException {
        Ast.Exp expr;
        Ast.Type type;
        Ast.Id id;
        int index;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 15:
        type = BasicType();
        jj_consume_token(53);
        index = IntLit();
        jj_consume_token(54);
                                                                     expr = new Ast.NewArray(type, index);
        break;
      case ID:
        id = ID();
        jj_consume_token(51);
        jj_consume_token(52);
                                      expr = new Ast.NewObj(id.nm);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 17:
    case 24:
    case 25:
    case INTLIT:
    case ID:
    case 35:
    case 40:
    case 51:
      expr = Expr();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Expr -> AndExpr {"||" AndExpr}
  static final public Ast.Exp Expr() throws ParseException {
        Ast.Exp e1, e2;
    e1 = AndExpr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(39);
      e2 = AndExpr();
                                              e1 = new Ast.Binop(Ast.BOP.OR, e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// AndExpr -> RelExpr {"&&" RelExpr}
  static final public Ast.Exp AndExpr() throws ParseException {
        Ast.Exp e1, e2;
    e1 = RelExpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(38);
      e2 = RelExpr();
                                            e1 = new Ast.Binop(Ast.BOP.AND, e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// RelExpr -> ArithExpr {RelOp ArithExpr}
  static final public Ast.Exp RelExpr() throws ParseException {
        Ast.Exp e1, e2;
        Ast.BOP op;
    e1 = ArithExpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      op = RelOp();
      e2 = ArithExpr();
                                                          e1 = new Ast.Binop(op, e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ArithExpr -> Term {("+" | "-") Term}
  static final public Ast.Exp ArithExpr() throws ParseException {
        Ast.Exp e1, e2;
        Ast.BOP op;
    e1 = Term();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
      case 35:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
                       op = Ast.BOP.ADD;
        break;
      case 35:
        jj_consume_token(35);
                                                   op = Ast.BOP.SUB;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = Term();
                        e1 = new Ast.Binop(op, e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Term -> Factor {("*" | "/") Factor}
  static final public Ast.Exp Term() throws ParseException {
        Ast.Exp e1, e2;
        Ast.BOP op;
    e1 = Factor();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
      case 37:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                       op = Ast.BOP.MUL;
        break;
      case 37:
        jj_consume_token(37);
                                                   op = Ast.BOP.DIV;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = Factor();
                        e1 = new Ast.Binop(op, e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Factor     -> UnOp Factor
//           |  "(" Expr ")"
//           |  ExtId ( ["[" Expr "]"]
//                    | "(" [Args] ")" )
//           |  Literal
  static final public Ast.Exp Factor() throws ParseException {
        Ast.Exp f;
        Ast.Exp e = null;
        List<Ast.Exp> args = new ArrayList<Ast.Exp>();
        boolean hasArgs = false;
        Ast.UOP unop;
        String strLit;
        boolean boolLit;
        int intLit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
    case 40:
      unop = UnOp();
      f = Factor();
                                             f = new Ast.Unop(unop, f);
      break;
    case 51:
      jj_consume_token(51);
      f = Expr();
      jj_consume_token(52);
      break;
    case 17:
    case ID:
      f = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 53:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          jj_consume_token(51);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
          case 24:
          case 25:
          case INTLIT:
          case ID:
          case 35:
          case 40:
          case 51:
            args = Args();
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
          jj_consume_token(52);
                                if (f instanceof Ast.Id)
                                {
                                        f = new Ast.Call( new Ast.This(), ((Ast.Id)f).nm, args);
                                }
                                else if (f instanceof Ast.Field)
                                {
                                        f = new Ast.Call(((Ast.Field)f).obj, ((Ast.Field)f).nm, args);
                                }
          break;
        default:
          jj_la1[33] = jj_gen;
          if (jj_2_2(2)) {
            jj_consume_token(53);
            e = Expr();
            jj_consume_token(54);
                                                            f = new Ast.ArrayElm(f, e);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    case INTLIT:
      intLit = IntLit();
                                      f = new Ast.IntLit(intLit);
      break;
    case 24:
    case 25:
      boolLit = BoolLit();
                                        f = new Ast.BoolLit(boolLit);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

// ExtId -> ["this" "."] <ID> {"." <ID>}
  static final public Ast.Exp ExtId() throws ParseException {
        Ast.Exp extId;
        Ast.Id id;
        Ast.Id mn;
        Ast.This self = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(50);
                      self = new Ast.This();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    id = ID();
                        extId = self == null ? id : new Ast.Field(self, id.nm);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_14;
      }
      jj_consume_token(50);
      id = ID();
                         extId = new Ast.Field(extId, id.nm);
    }
                {if (true) return extId;}
    throw new Error("Missing return statement in function");
  }

// ID -> <ID>
  static final public Ast.Id ID() throws ParseException {
        Token token;
    token = jj_consume_token(ID);
                String lit = new String(token.image);
                {if (true) return new Ast.Id(lit);}
    throw new Error("Missing return statement in function");
  }

// StrLit -> <STRLIT>
  static final public String StrLit() throws ParseException {
        Token tkn;
    tkn = jj_consume_token(STRLIT);
                String lit = new String(tkn.image);
                {if (true) return lit.replaceAll("^\u005c"|\u005c"$", "");}
    throw new Error("Missing return statement in function");
  }

// IntLit -> <INTLIT>
  static final public int IntLit() throws ParseException {
        Token tkn;
    tkn = jj_consume_token(INTLIT);
                {if (true) return Integer.parseInt(tkn.image);}
    throw new Error("Missing return statement in function");
  }

// BoolLit -> "true" | "false"
  static final public boolean BoolLit() throws ParseException {
        String bool;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
                  bool = "true";
      break;
    case 25:
      jj_consume_token(25);
                                               bool = "false";
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return Boolean.parseBoolean(bool);}
    throw new Error("Missing return statement in function");
  }

// CompOp -> "==" | "!=" | "<" | "<=" | ">" | ">="
  static final public Ast.BOP RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
                       {if (true) return Ast.BOP.EQ;}
        break;
      case 42:
        jj_consume_token(42);
                         {if (true) return Ast.BOP.NE;}
        break;
      case 43:
        jj_consume_token(43);
                         {if (true) return Ast.BOP.LT;}
        break;
      case 44:
        jj_consume_token(44);
                         {if (true) return Ast.BOP.LE;}
        break;
      case 45:
        jj_consume_token(45);
                         {if (true) return Ast.BOP.GT;}
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 46:
      jj_consume_token(46);
                   {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// UnOp -> ("-" | "!")
  static final public Ast.UOP UnOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
                 {if (true) return Ast.UOP.NEG;}
      break;
    case 40:
      jj_consume_token(40);
                   {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(INTLIT)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public mjParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x400,0xc000,0x1000,0x0,0xc000,0xe800,0x4360000,0x0,0xe000,0x0,0xc000,0xc000,0x4360000,0x0,0x83020000,0x0,0x80000,0x83020000,0x83020000,0x4360000,0x0,0x83020000,0xc000,0x83030000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83020000,0x0,0x0,0x83020000,0x20000,0x0,0x3000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2,0x0,0x20000,0x2,0x2,0x800002,0x8000,0x2,0x200000,0x2,0x0,0x800002,0x200000,0x8010a,0x288000,0x0,0x8010b,0x8010a,0x800002,0x20000,0x8010b,0x2,0x8010a,0x80,0x40,0x7e00,0xc,0xc,0x30,0x30,0x8010a,0x80000,0x280000,0x8010a,0x0,0x40000,0x0,0x3e00,0x7e00,0x108,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public mjParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public mjParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new mjParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public mjParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new mjParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public mjParser(mjParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(mjParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
