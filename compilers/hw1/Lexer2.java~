//----------------------------------------------------------------------
// CS321 Assignment 1 (Fall 2014)
//
// miniJava Lexer2 (Manual Implementation)
//
// By Ian Aldrighetti
//----------------------------------------------------------------------

import java.io.*;
import java.util.*;

public class Lexer2 implements mjTokenConstants
{
	// A set containing reserved keywords.
	private Set<String> reservedKeywords;
	
	private Set<String> operators;
	
	private Set<String> delimiters;
	
	// A lexical error.
	static class LexError extends Exception
	{
		int line;
		int column;

		public LexError(int line, int column)
		{
			super("");
			this.line = line;
			this.column = column;
		}
		
		public LexError(String message, int line, int column)
		{
			super(message);
			this.line = line;
			this.column = column;
		}
		
		public int getLine()
		{
			return line;
		}
		
		public int getColumn()
		{
			return column;
		}
	}

	// A Token.
	static class Token
	{
		int kind; 		// token code
		int line;	   	// line number of token's first char
		int column;    	// column number of token's first char
		String lexeme; 	// token lexeme

		// need more code here ...
	}
	
	static class Buffer
	{
		int pos;
		String str;
		
		public Buffer(String str)
		{
			this.pos = 0;
			this.str = str;
		}
		
		public int next()
		{
			if (pos >= str.length())
			{
				return -1;
			}
			
			return (int)str.charAt(pos++);
		}
		
		public int peek(int offset)
		{
			if (pos + offset >= str.length())
			{
				return -1;
			}
			
			return (int)str.charAt(pos + offset);
		}
		
		public int getPos()
		{
			return pos;
		}
	}

    public void main(String[] args)
    {
		if (args.length == 0)
		{
			System.err.println("ERROR: An argument with the file name to parse is required.");
			return;
		}
		else if (args.length > 1)
		{
			System.err.println("ERROR: Only a single argument is allowed -- the file to parse.");
			return;
		}
		
		try
		{
			FileInputStream input = new FileInputStream(args[0]);
			
			StringBuilder buffer = new StringBuilder(input.available() * 2);
			int c;
			while((c = input.read()) != -1)
			{
				buffer.append((char)c);
			}
			
			Buffer b = new Buffer(buffer.toString());
			List<Token> tokens = parse(b);
		}
		catch (Exception e)
		{
			System.err.println("ERROR: [" + e.getClass().getName() + "] " + e.getMessage());
		}
    }
    
    // Loads the reserved keywords into a set, if necessary.
    private void loadReservedKeywords()
    {
    	if (reservedKeywords != null)
    	{
    		return;
    	}
    	
    	reservedKeywords = new HashSet<String>();
    	reservedKeywords.add("class");
    	reservedKeywords.add("extends");
    	reservedKeywords.add("static");
    	reservedKeywords.add("public");
    	reservedKeywords.add("void");
    	reservedKeywords.add("int");
    	reservedKeywords.add("boolean");
    	reservedKeywords.add("new");
    	reservedKeywords.add("if");
    	reservedKeywords.add("else");
    	reservedKeywords.add("while");
    	reservedKeywords.add("return");
    	reservedKeywords.add("main");
    	reservedKeywords.add("true");
    	reservedKeywords.add("false");
    	reservedKeywords.add("String");
    	reservedKeywords.add("System");
    	reservedKeywords.add("out");
    	reservedKeywords.add("println");
    	
    	operators = new HashSet<String>();
    	operators.add("+");
    	operators.add("-");
    	operators.add("*");
    	operators.add("/");
    	operators.add("&&");
    	operators.add("||");
    	operators.add("!");
    	operators.add("==");
    	operators.add("!=");
    	operators.add("<");
    	operators.add("<=");
    	operators.add(">");
    	operators.add(">=");
    	
    	delimiters = new HashSet<String>();
    	delimiters.add("=");
    	delimiters.add(";");
    	delimiters.add(",");
    	delimiters.add(".");
    	delimiters.add("(");
    	delimiters.add(")");
    	delimiters.add("[");
    	delimiters.add("]");
    	delimiters.add("{");
    	delimiters.add("}");
    }
    
    /*
     Identifiers - excluding reserved, starts with a letter, can contain letters/numbers.
     
     `Integer - Only digits, must be between 0 and (2^31) - 1, negative just has - (operator) in 				front.
     `String - begin, end with quote quote ("), cannot contain ", \r, \n (verify this).
     
     Comments - // or multi-line (/ * * / [no space]), cannot be nested.
     
     Operators: +, -, *, /, &&, ||, !, ==, !=, <, <=, >, >=
     
     Delimiter: =, ;, ,, ., (, ), [, ], {, }
    */
    
    // Parses the file, within the buffer.
    public List<Token> parse(Buffer buffer) throws LexError
    {
    	List<Token> tokens = new ArrayList<Token>();
    	
    	loadReservedKeywords();
    	
    	int c, lineNumber = 1;
    	while ((c = buffer.next()) != -1)
    	{
    		char ch = (char)c;
    		
    		// If it is a space, newline, etc., skip it!
    		if (isSkippedChar(ch))
    		{
    			// Increment the line number, though.
    			lineNumber = ch == '\n' ? lineNumber + 1 : lineNumber;
    			continue;
    		}
    		
    		Token token = tokenize(c, lineNumber, buffer);
    		
    		// It might be empty (a comment, perhaps).
    		if (token == null)
    		{
    			continue;
    		}
    		
    		tokens.add(token);
    	}
    }
    
    private Token tokenize(char ch, int lineNumber, Buffer buffer)
    {
    	// Is it a string?
    	if (ch == '"')
    	{
    		return getStringLiteral(ch, lineNumber, buffer);
    	}
    	else if (Character.isDigit(ch))
    	{
    		return getIntegerLiteral(ch, lineNumber, buffer);
    	}
    	else if ((ch == '/' && buffer.peek(1) == '/') || (ch == '/' && buffer.peek(1) == '*'))
    	{
    		// !!! TODO: Line number may need to be handled differently (multiline comment).
    		handleComment(ch, lineNumber, buffer);
    		
    		return null;
    	}
    	else if (isOperatorOrDelimiter(ch, buffer.peek(1)))
    	{
    		return getOperatorOrDelimiter(ch, lineNumber, buffer);
    	}
    	else if (isReservedKeyword(ch, buffer))
    	{
    		return getReservedKeyword(ch, lineNumber, buffer);
    	}
    	else
    	{
    		// Must be an identifier.
    	}
    }
    
    // Determines if ch is \n, \r, \t or a space.
    private boolean isSkippedChar(char ch)
    {
    	return ch == '\n' || ch == '\r' || ch == '\t' || ch == ' ';
    }
}
